<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.AsyncREST">
<Description>
Basic async REST example.</Description>
<Super>%CSP.REST</Super>
<TimeCreated>64623,81996.220197</TimeCreated>

<Parameter name="CONTENTTYPE">
<Default>application/json</Default>
</Parameter>

<Parameter name="CHARSET">
<Default>UTF-8</Default>
</Parameter>

<Parameter name="UseSession">
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<Parameter name="GLVN">
<Default>^AsyncREST</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/StartTask" Method="GET" Call="StartTask"/>
<Route Url="/GetTask/:TaskId" Method="GET" Call="GetTask"/>
</Routes>
]]></Data>
</XData>

<Method name="GetTask">
<Description>
Get info about task</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TaskId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set PercentDone = ..TaskStatus(TaskId)
	
	If PercentDone = 100 {
		Set Result = ..GetCompletedTask(TaskId) 
	} Else {
		Set Result = {"TaskId" : (+TaskId), "PercentDone":(PercentDone), "Alive":($Data(^$JOB(TaskId)))}
	}
	
	Write Result.%ToJSON()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="StartTask">
<Description>
Start new task and return result immediately</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Job ..Task()
	Write {"TaskId" : ($zchild)}.%ToJSON()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Task">
<Description>
Actually do task</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set Wait = 0 
	Set Increase = 1
	While Wait<=10 {
		Hang Increase
		Do ..LogTaskStatus( Wait * 10)
		Set Wait = Wait + Increase
			
	}
	
	Do ..LogTaskData("Some result")
]]></Implementation>
</Method>

<Method name="LogTaskStatus">
<Description>
Set current task progression</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>PercentDone:%Integer(MINVAL=0,MAXVAL=100)</FormalSpec>
<Implementation><![CDATA[
	Set:PercentDone>100 PercentDone = 100
	Set:PercentDone<0 PercentDone = 0
	
	Set @..#GLVN@($job) = PercentDone
	If PercentDone = 0 {
		Set @..#GLVN@($job, "Start") = $zdt($h, 3, 1, 3)
	} ElseIf PercentDone = 100 {
		Set @..#GLVN@($job, "End") = $zdt($h, 3, 1, 3)
	}
]]></Implementation>
</Method>

<Method name="LogTaskData">
<Description>
Specify data = task output</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Data</FormalSpec>
<Implementation><![CDATA[	Set @..#GLVN@($job, "Data") = Data
]]></Implementation>
</Method>

<Method name="TaskStatus">
<Description>
Get current task progression</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>TaskId:%Integer</FormalSpec>
<Implementation><![CDATA[@..#GLVN@(TaskId)
]]></Implementation>
</Method>

<Method name="GetCompletedTask">
<Description>
Get info about completed task</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>TaskId:%Integer</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
{
	"TaskId": (+TaskId), 
	"PercentDone": 100,
	"Start": (@..#GLVN@(TaskId, "Start")),
	"End": (@..#GLVN@(TaskId, "End")),
	"Data": (@..#GLVN@(TaskId, "Data")),
	"IsJobAlive": ($Data(^$JOB(TaskId)))
}
]]></Implementation>
</Method>

<Method name="ClearTask">
<Description>
Remove complete task</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TaskId:%Integer</FormalSpec>
<Implementation><![CDATA[	Kill @..#GLVN@(TaskId)
]]></Implementation>
</Method>
</Class>
</Export>
