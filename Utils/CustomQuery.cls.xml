<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.CustomQuery">
<Super>%Persistent,%Populate</Super>
<TimeCreated>63869,45310.24869</TimeCreated>

<Property name="Prop1">
<Type>%String</Type>
</Property>

<Property name="Prop2">
<Type>%Integer</Type>
</Property>

<Query name="AllRecords">
<Type>%Query</Type>
<SqlName>AllRecords</SqlName>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Prop1:%String,Prop2:%Integer"/>
</Query>

<Method name="AllRecordsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle = ""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllRecordsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Обходим глобал ^Utils.CustomQueryD
	#; Записываем следующий id в qHandle, а значение глобала с новым id в val
	Set qHandle = $Order(^Utils.CustomQueryD(qHandle),1,val)
	#; Проверяем дошли ли до конца данных   
	If qHandle = "" {
		Set AtEnd = 1
		Set Row = ""
		Quit $$$OK
	}
	#; Если нет, формируем %List
	#; val = $Lb("", Prop1, Prop2) - см. Storage Definition
	#; Row = $Lb(Id, Prop1, Prop2) - см. ROWSPEC запроса All
	Set Row = $Lb(qHandle, $Lg(val,2), $Lg(val,3))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllRecordsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="AllStatic">
<Type>%Query</Type>
<SqlName>AllStatic</SqlName>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Prop1:%String,Prop2:%Integer"/>
</Query>

<Method name="AllStaticExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(	DECLARE C CURSOR FOR
		    SELECT Id, Prop1, Prop2
		    FROM Utils.CustomQuery)

 	&sql(OPEN C)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllStaticFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>AllStaticExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(FETCH C INTO :Id, :Prop1, :Prop2)
	#; Проверяем дошли ли до конца данных   
	If (SQLCODE'=0) {
		Set AtEnd = 1
		Set Row = ""
		Quit $$$OK
	}
	Set Row = $Lb(Id, Prop1, Prop2)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllStaticClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>AllStaticFetch</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(CLOSE C)
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="AllDynamic">
<Type>%Query</Type>
<SqlName>AllDynamic</SqlName>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Prop1:%String,Prop2:%Integer"/>
</Query>

<Method name="AllDynamicExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle = ##class(%SQL.Statement).%ExecDirect(,"SELECT * FROM Utils.CustomQuery")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllDynamicFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If qHandle.%Next()=0 {
		Set AtEnd = 1
		Set Row = ""
		Quit $$$OK
	} 

	Set Row = $Lb(qHandle.%Get("Id"), qHandle.%Get("Prop1"), qHandle.%Get("Prop2"))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllDynamicClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Utils.CustomQueryD</DataLocation>
<DefaultData>CustomQueryDefaultData</DefaultData>
<IdLocation>^Utils.CustomQueryD</IdLocation>
<IndexLocation>^Utils.CustomQueryI</IndexLocation>
<StreamLocation>^Utils.CustomQueryS</StreamLocation>
<ExtentSize>1000000</ExtentSize>
<Data name="CustomQueryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Prop1</Value>
</Value>
<Value name="3">
<Value>Prop2</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>0.0023%</Selectivity>
<OutlierSelectivity>.999767:</OutlierSelectivity>
</Property>
<Property name="Prop1">
<Selectivity>0.0004%</Selectivity>
</Property>
<Property name="Prop2">
<Selectivity>0.0001%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-10932</BlockCount>
</SQLMap>
</Storage>
</Class>
</Export>
