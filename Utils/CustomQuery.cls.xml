<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.CustomQuery">
<Super>%Persistent,%Populate</Super>
<TimeCreated>63869,45310.24869</TimeCreated>

<Property name="Prop1">
<Type>%String</Type>
</Property>

<Property name="Prop2">
<Type>%Integer</Type>
</Property>

<Query name="All">
<Type>%Query</Type>
<SqlName>All</SqlName>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Prop1:%String,Prop2:%Integer"/>
</Query>

<Method name="AllExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle = ""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle = $O(^Utils.CustomQueryD(qHandle),1,val)
	If qHandle="" {
		Set AtEnd=1
		Quit $$$OK
	}
	Set Row = $lb(qHandle,$lg(val,2),$lg(val,3))
	#;Set Row = $lb(qHandle)_$list(val,2,5)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DetermineStorage">
<ClassMethod>1</ClassMethod>
<FormalSpec>class=1,property=1</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Test">
<Description>
Do ##class(Utils.CustomQuery).Test(100)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Count=100</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set methods = "OldDynamicSQL,NewDynamicSQL,OldCustomQuery,NewCustomQuery,OldExtentQuery,NewExtentQuery,StaticSQL,GlobalIteration"
	Set methodsCount = $L(methods,",")
	For i=1:1:methodsCount {
		Set method = $P(methods,",",i)
		Set time = ..ExecuteNTimes(method, Count)
		Write method,$c(9),$FN(time,"."),!
	}
]]></Implementation>
</Method>

<Method name="ExecuteNTimes">
<ClassMethod>1</ClassMethod>
<FormalSpec>Method,Count=100</FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[
	Set start = $NOW()
	For i=1:1:Count {
		Do $ClassMethod("Utils.CustomQuery",Method)
	}
	Set end = $NOW()
	Set time = $p(end,",",*) - $p(start,",",*)
	Set timeAvg = time/Count
	Quit timeAvg
]]></Implementation>
</Method>

<Method name="OldDynamicSQL">
<Description>
Do ##class(Utils.CustomQuery).OldDynamicSQL()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	/*Set rset = ##class(%ResultSet).%New("SELECT * FROM Utils.CustomQuery")
	Do rset.Execute()

	While (rset.Next()) {
		#; Write rset.Data("Id")," "
	}*/
]]></Implementation>
</Method>

<Method name="NewDynamicSQL">
<Description>
Do ##class(Utils.CustomQuery).NewDynamicSQL()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set rset = ##class(%SQL.Statement).%ExecDirect(,"SELECT * FROM Utils.CustomQuery")

	While (rset.%Next()) {
		#; Write rset.%Get("Id")," "
	}
]]></Implementation>
</Method>

<Method name="OldCustomQuery">
<Description>
Do ##class(Utils.CustomQuery).OldCustomQuery()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New("Utils.CustomQuery:All")
	Do rset.Execute()

	While (rset.Next()) {
		#; Write rset.Data("Id"),!
	}
]]></Implementation>
</Method>

<Method name="NewCustomQuery">
<Description>
Do ##class(Utils.CustomQuery).NewCustomQuery()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set rset = ##class(%SQL.Statement).%ExecDirect(,"Call Utils.""All""()")

	While (rset.%Next()) {
		#; Write rset.%Get("Id")," "
	}
]]></Implementation>
</Method>

<Method name="OldExtentQuery">
<Description>
Do ##class(Utils.CustomQuery).OldExtentQuery()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New("Utils.CustomQuery:Extent")
	Do rset.Execute()

	While (rset.Next()) {
		#; Write rset.Data("Id")," "
	}
]]></Implementation>
</Method>

<Method name="NewExtentQuery">
<Description>
Do ##class(Utils.CustomQuery).NewExtentQuery()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set rset = ##class(%SQL.Statement).%ExecDirect(,"Call Utils.CustomQuery_Extent()")

	While (rset.%Next()) {
		#; Write rset.%Get("Id")," "
	}
]]></Implementation>
</Method>

<Method name="StaticSQL">
<Description>
Do ##class(Utils.CustomQuery).StaticSQL()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&sql(	DECLARE C1 CURSOR FOR
			SELECT Id, Prop1, Prop2
			INTO :Id, :Prop1, :Prop2
			FROM Utils.CustomQuery)
	&sql(OPEN C1)
	&sql(FETCH C1)
	While (SQLCODE = 0) {
		#; Write Id," "
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
]]></Implementation>
</Method>

<Method name="GlobalIteration">
<Description>
Do ##class(Utils.CustomQuery).GlobalIteration()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set Id=""
	Set Id = $O(^Utils.CustomQueryD(Id),1,val)
	While (Id'="") {
		Set Prop1 = $lg(val,2)
		Set Prop1 = $lg(val,3)
		#; Write Id," "
		Set Id = $O(^Utils.CustomQueryD(Id),1,val)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Utils.CustomQueryD</DataLocation>
<DefaultData>CustomQueryDefaultData</DefaultData>
<IdLocation>^Utils.CustomQueryD</IdLocation>
<IndexLocation>^Utils.CustomQueryI</IndexLocation>
<StreamLocation>^Utils.CustomQueryS</StreamLocation>
<Data name="CustomQueryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Prop1</Value>
</Value>
<Value name="3">
<Value>Prop2</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
