<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.CustomQueryStatic">
<Super>%Persistent,%Populate</Super>
<TimeCreated>63888,65779.264449</TimeCreated>

<Property name="Prop1">
<Type>%String</Type>
</Property>

<Property name="Prop2">
<Type>%Integer</Type>
</Property>

<Method name="Test">
<Description>
Do ##class(Utils.CustomQueryStatic).Test()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	If $O(^Utils.CustomQueryStaticD(""),-1)'=10 {
		Do ..%KillExtent()
		Do ..Populate(10)
	}
	Do ..ExecuteQuery()
]]></Implementation>
</Method>

<Method name="ExecuteQuery">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set statement=##class(%SQL.Statement).%New()
	Set status=statement.%PrepareClassQuery("Utils.CustomQueryStatic","INTOWithFETCH")
	If $$$ISERR(status) { Do $system.OBJ.DisplayError(status) }
	Set resultset=statement.%Execute()
	Do resultset.%Display()
	
	Set status=statement.%PrepareClassQuery("Utils.CustomQueryStatic","INTOWithDECLARE")
	If $$$ISERR(status) { Do $system.OBJ.DisplayError(status) }
	Set resultset=statement.%Execute()
	Do resultset.%Display() // Same thing
]]></Implementation>
</Method>

<Method name="ExecuteQueryOld">
<Description>
Do ##class(Utils.CustomQueryStatic).ExecuteQueryOld()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New("Utils.CustomQueryStatic:AllStatic")
	Do rset.Execute()

	While (rset.Next()) {
		Write rset.Data("Id"),!
	}
]]></Implementation>
</Method>

<Query name="INTOWithFETCH">
<Type>%Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Prop1:%String,Prop2:%Integer"/>
</Query>

<Method name="INTOWithFETCHExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(	DECLARE C CURSOR FOR
		    SELECT Id, Prop1, Prop2
		    FROM Utils.CustomQueryStatic
 	)

 	&sql(OPEN C)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="INTOWithFETCHFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>INTOWithFETCHExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(FETCH C INTO :Id, :Prop1, :Prop2)
	#; Проверяем дошли ли до конца данных 
	s ^t = ^t _ " " _ SQLCODE
	If (SQLCODE=-400) {w $g(%msg,"nono")}
	If (SQLCODE'=0) {
		Set AtEnd = 1
		Set Row = ""
		Quit $$$OK
	}
	Set Row = $Lb(Id, Prop1, Prop2)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="INTOWithFETCHClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>INTOWithFETCHFetch</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(CLOSE C)
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="INTOWithDECLARE">
<Type>%Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="Id:%String,Prop1:%String,Prop2:%Integer"/>
</Query>

<Method name="INTOWithDECLAREExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(	DECLARE C1 CURSOR FOR
		    SELECT Id, Prop1, Prop2
		    INTO :Id, :Prop1, :Prop2
		    FROM Utils.CustomQueryStatic
 	)
 	&sql(OPEN C1)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="INTOWithDECLAREFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>INTOWithDECLAREExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(FETCH C1 )
	If (SQLCODE=-400) {w $g(%msg,"nono")}
	If (SQLCODE'=0) {
		Set AtEnd = 1
		Set Row = ""
		Quit $$$OK
	}
	Set Row = $Lb(Id, Prop1, Prop2)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="INTOWithDECLAREClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>INTOWithDECLAREFetch</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(CLOSE C1)
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Utils.CustomQueryStaticD</DataLocation>
<DefaultData>CustomQueryStaticDefaultData</DefaultData>
<IdLocation>^Utils.CustomQueryStaticD</IdLocation>
<IndexLocation>^Utils.CustomQueryStaticI</IndexLocation>
<StreamLocation>^Utils.CustomQueryStaticS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="CustomQueryStaticDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Prop1</Value>
</Value>
<Value name="3">
<Value>Prop2</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="Prop1">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="Prop2">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>
</Export>
