<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.GetStored">
<Super>%Persistent,%Populate</Super>
<TimeCreated>64106,45305.599896</TimeCreated>

<Parameter name="POPSIZE">
<Default>1000</Default>
</Parameter>

<Property name="text">
<Type>%String</Type>
</Property>

<Method name="Test">
<Description>
Do ##class(Utils.GetStored).Test()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ..%KillExtent()
	do ..Populate(..#POPSIZE, $$$NO, , , $$$NO)
	do ..Main(100)
	do ..Main(1000)
	do ..Main(10000)
]]></Implementation>
</Method>

<Method name="Main">
<Description>
Do ##class(Utils.GetStored).Main(100)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Count=100</FormalSpec>
<Implementation><![CDATA[
	Set StartA = $Piece($Now(),",",2)
	Do ..Object(Count)
	Set EndA = $Piece($Now(),",",2)
	Set TimeA = EndA - StartA
	
	Set StartB = $Piece($Now(),",",2)
	Do ..GetStored(Count)
	Set EndB = $Piece($Now(),",",2)
	Set TimeB = EndB - StartB
	
	Set StartC = $Piece($Now(),",",2)
	Do ..Global(Count)
	Set EndC = $Piece($Now(),",",2)
	Set TimeC = EndC - StartC
	
	Write "Iterations: ",Count,!
	Write "Object access: ",TimeA,!
	Write "GetStored access: ",TimeB,!
	Write "Global access: ",TimeC,!
	Write "Object access takes ",$FN(TimeA/TimeB*100,"",2) _ "% of GetStored time",!
	Write "Object access takes ",$FN(TimeA/TimeC*100,"",2) _ "% of Global time",!
	Write "GetStored access takes ",$FN(TimeB/TimeC*100,"",2) _ "% of Global time",!,!
]]></Implementation>
</Method>

<Method name="Object">
<ClassMethod>1</ClassMethod>
<FormalSpec>Count=100</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	For i=1:1:Count {
		Set Obj = ..%OpenId($Random(..#POPSIZE-1)+1)
		Set Val = Obj.text
	}
]]></Implementation>
</Method>

<Method name="GetStored">
<ClassMethod>1</ClassMethod>
<FormalSpec>Count=100</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	For i=1:1:Count {
		Set Val = ..textGetStored($Random(..#POPSIZE-1)+1)
	}
]]></Implementation>
</Method>

<Method name="Global">
<ClassMethod>1</ClassMethod>
<FormalSpec>Count=100</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// This macro compiles into a direct global reference to property %prop of class %cls with id %idvar
	#Define GetStoredProp(%cls,%prop,%idvar) ##Expression(##class(Utils.GetStored).GetPropGLVN(%cls,%prop, $name(%idvar)))
	For i=1:1:Count {
		Set Id = $Random(..#POPSIZE-1)+1 
		Set Val = $$$GetStoredProp("Utils.GetStored","text", Id) 
	}
]]></Implementation>
</Method>

<Method name="GetPropGLVN">
<Description>
Write ##class(Utils.GetStored).GetPropGLVN("Utils.GetStored", "text")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Class,Property,IdVar="id"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set StoredCode = $Get($$$EXTPROPondisk($$$pEXT,Class,Property))
	Set StoredCode = $Replace(StoredCode, "(id)", "(" _ IdVar _ ")") 
	Return StoredCode
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Utils.GetStoredD</DataLocation>
<DefaultData>GetStoredDefaultData</DefaultData>
<IdLocation>^Utils.GetStoredD</IdLocation>
<IndexLocation>^Utils.GetStoredI</IndexLocation>
<StreamLocation>^Utils.GetStoredS</StreamLocation>
<Data name="GetStoredDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>text</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
