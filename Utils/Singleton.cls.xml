<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.Singleton">
<Description>
Singleton pattern implementation</Description>
<Super>%Library.SystemBase</Super>
<TimeCreated>64027,85626.491984</TimeCreated>

<Parameter name="Global">
<Description>
Global to store content</Description>
<Default>^Singleton</Default>
</Parameter>

<Property name="Content">
<Description>
Actual object content
It can be be anything: string or a dynamic object</Description>
<Type>%String</Type>
</Property>

<Method name="GetOref">
<Description>
This method finds OREF for an object of a current class if it exists in a current process</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	// Get current classname
	Set Class = $ClassName()
	Set OREF = $$$NULLOREF
	
	// This query returns a list of all object instances currently in memory within the current process. 
	// http://docs.intersystems.com/latest/csp/documatic/%25CSP.Documatic.cls?PAGE=CLASS&LIBRARY=%25SYS&CLASSNAME=%25SYSTEM.OBJ#Anchor_Queries
	&sql(SELECT Count(OREF), OREF INTO :Count, :OREFTemp FROM %SYSTEM.OBJ_ObjectList() WHERE ClassName = :Class)
	
	If Count'=0 {	
		Set OREF = OREFTemp
	}
	Return OREF
]]></Implementation>
</Method>

<Method name="Get">
<Description>
If no object of this class is found in process memory
then a new one would be returned
with Content value taken from global

If there is an object of this class in memory
then it would be returned</Description>
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>Utils.Singleton</ReturnType>
<Implementation><![CDATA[
	Set OREF = ..GetOref()
	If OREF = $$$NULLOREF {
		Set Obj = ..%New()
	} Else {
		// Convert integer-oref into real OREF 
		Set Obj = $$$objIntToOref(OREF)
	}
	Return Obj
]]></Implementation>
</Method>

<Method name="Test">
<Description>
Test singleton object
Do ##class(Utils.Singleton).Test()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set a = ##class(Utils.Singleton).Get()
	Set a.Content = $Random(100)
	Set b=##class(Utils.Singleton).Get()
	Write "object b: " _ b.Content,!
	Do a.Save()
	Kill
	Set c=##class(Utils.Singleton).Get()
	Write "object c: " _ c.Content
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
Constructor, loads data from global</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Return:($Stack($Stack-2,"PLACE")'["Get") $$$ERROR($$$GeneralError, "This class can't be instantiated directly, call Get method")
	Set ..Content = $Get(@..#Global)
	Return $$$OK
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Saves data to global</Description>
<Implementation><![CDATA[	Set @..#Global = ..Content
]]></Implementation>
</Method>
</Class>
</Export>
