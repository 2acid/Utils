<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.Temp">
<Super>%Persistent</Super>
<TimeCreated>64301,85284.627436</TimeCreated>

<Property name="data">
<Type>%String</Type>
<SqlComputeCode>set {*} = ##class(Utils.Temp).dataGetStatic({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
</Property>

<Method name="dataGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..dataGetStatic(..%Id())
]]></Implementation>
</Method>

<Method name="dataSet">
<FormalSpec>val</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set i%data = val
	return $$$OK
]]></Implementation>
</Method>

<Method name="dataGetStatic">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set:'id id = 0
	return:$d(%ts)=0 $g(^prop(id),"")
	return:$d(^prop(id,%ts),val)=1 val
	return:$o(^prop(id,%ts),%state,val) val
	if %state=1 {
		set temp = $o(^prop(id,%ts),-1,val)
		return val
	}
	return ""
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	if insert = $$$NO {
		
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ts = $ztimestamp
	set ep = $zdt(ts,-2) _ $p(ts,".",2) //  unixtime - ms. 
	if ((insert = $$$YES) ||  (^prop(..%Id()) '=i%data)) {
		set ^prop(..%Id()) = i%data
		set ^prop(..%Id(), ep) = i%data
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="populate">
<Description>
do ##class(Utils.Temp).populate()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill ^dbg,^prop,%ts,%state
	do ..%KillExtent()
	w $System.Status.GetErrorText(..add(1))
	w $System.Status.GetErrorText(..add(2))
	
	hang 1
	
	do ..upd(1,2)
	hang 1
	do ..upd(1,3)
	do ##class(%SQL.Statement).%ExecDirect(,"select * from "_$classname()).%Display()
]]></Implementation>
</Method>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>data</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%New(data)
	quit obj.%Save()
]]></Implementation>
</Method>

<Method name="upd">
<ClassMethod>1</ClassMethod>
<FormalSpec>id,data</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%OpenId(id)
	set obj.data = data
	quit obj.%Save()
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>data</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..data = data
	quit $$$OK
]]></Implementation>
</Method>

<Method name="get">
<Description>
w ##class(Utils.Temp).get()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	quit:$d(^a(5),val)=1 val
	quit ""
]]></Implementation>
</Method>

<Method name="AtTime">
<Description>
Expect 2017-01-19 00:18:14.000
w ##class(Utils.Temp).AtTime("2017-01-19 00:18:14.000"),!,%ts</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String(VALUELIST=",-1,1",DISPLAYLIST=",before,after")=-1,timestamp:%TimeStamp={$zdt($ztimestamp,3,1,3)}</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	q:$d(%ts) $$$YES
	set %state = type
	set %ts=$zdt($zdth(timestamp,3),-2) _ $p(timestamp,".",2)
	q $$$YES
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Utils.TempD</DataLocation>
<DefaultData>TempDefaultData</DefaultData>
<IdLocation>^Utils.TempD</IdLocation>
<IndexLocation>^Utils.TempI</IndexLocation>
<StreamLocation>^Utils.TempS</StreamLocation>
<Data name="TempDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>data</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
